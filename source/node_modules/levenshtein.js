/**
 * Compute Levenshtein distance between two strings
 * Module to be used as Kofax RPA Connector
 * 
 * @author Pavel Vraj
 * @version 0.1
 */

module.exports = {

  /**
   * Calulates the difference
   * 
   * @return {JSON} With the difference
   */
  distance: function(string1, string2) {

    const len1 = string1.length;
    const len2 = string2.length;
    const matrix = [];
    for (let i = 0; i <= len1; i++) {
      matrix[i] = [i];
    }
    for (let j = 0; j <= len2; j++) {
      matrix[0][j] = j;
    }
    for (let i = 1; i <= len1; i++) {
      for (let j = 1; j <= len2; j++) {
        const cost = string1[i - 1] === string2[j - 1] ? 0 : 1;
        matrix[i][j] = Math.min(
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j - 1] + cost
        );
      }
    }
    const maxLen = Math.max(len1, len2);
    const similarity = ((maxLen - matrix[len1][len2]) / maxLen) * 100;
    console.log(`Similarity: ${similarity}%`);
    var response_text = {
      "Similarity": similarity
    };
    return JSON.stringify(response_text);
  }
};